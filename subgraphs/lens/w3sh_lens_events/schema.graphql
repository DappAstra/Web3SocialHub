type Blocked @entity(immutable: true) {
  id: Bytes!
  byProfileId: BigInt # uint256
  idOfProfileBlocked: BigInt # uint256
  timestamp: BigInt # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type CommentCreated @entity(immutable: true) {
  id: Bytes!
  commentParams_profileId: BigInt # uint256
  commentParams_contentURI: String # string
  commentParams_pointedProfileId: BigInt # uint256
  commentParams_pointedPubId: BigInt # uint256
  pubId: BigInt # uint256
  timestamp: BigInt # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type Followed @entity(immutable: true) {
  id: Bytes!
  followerProfileId: BigInt # uint256
  idOfProfileFollowed: BigInt # uint256
  timestamp: BigInt # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type MirrorCreated @entity(immutable: true) {
  id: Bytes!
  mirrorParams_profileId: BigInt # uint256
  mirrorParams_metadataURI: String # string
  mirrorParams_pointedProfileId: BigInt # uint256
  mirrorParams_pointedPubId: BigInt # uint256
  pubId: BigInt # uint256
  timestamp: BigInt # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type PostCreated @entity(immutable: true) {
  id: Bytes!
  postParams_profileId: BigInt # uint256
  postParams_contentURI: String # string
  pubId: BigInt # uint256
  timestamp: BigInt # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type ProfileMetadataSet @entity(immutable: true) {
  id: Bytes!
  profileId: BigInt # uint256
  metadata: String # string
  timestamp: BigInt # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type QuoteCreated @entity(immutable: true) {
  id: Bytes!
  quoteParams_profileId: BigInt # uint256
  quoteParams_contentURI: String # string
  quoteParams_pointedProfileId: BigInt # uint256
  quoteParams_pointedPubId: BigInt # uint256
  pubId: BigInt # uint256
  timestamp: BigInt # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type Unblocked @entity(immutable: true) {
  id: Bytes!
  byProfileId: BigInt # uint256
  idOfProfileUnblocked: BigInt # uint256
  timestamp: BigInt # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type Unfollowed @entity(immutable: true) {
  id: Bytes!
  unfollowerProfileId: BigInt # uint256
  idOfProfileUnfollowed: BigInt # uint256
  timestamp: BigInt # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type HandleMinted @entity(immutable: true) {
  id: Bytes!
  handle: String! # string
  namespace: String! # string
  handleId: BigInt! # uint256
  to: Bytes! # address
  timestamp: BigInt! # uint256
  profileId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  profileId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type HandleLinked @entity(immutable: true) {
  id: Bytes!
  handle_id: BigInt! # uint256
  handle_collection: Bytes! # address
  token_id: BigInt! # uint256
  token_collection: Bytes! # address
  transactionExecutor: Bytes! # address
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type HandleUnlinked @entity(immutable: true) {
  id: Bytes!
  handle_id: BigInt! # uint256
  handle_collection: Bytes! # address
  token_id: BigInt! # uint256
  token_collection: Bytes! # address
  transactionExecutor: Bytes! # address
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NonceUpdated @entity(immutable: true) {
  id: Bytes!
  signer: Bytes! # address
  nonce: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
